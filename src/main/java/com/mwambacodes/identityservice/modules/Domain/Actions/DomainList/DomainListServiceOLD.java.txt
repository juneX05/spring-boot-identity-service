package com.mwambacodes.identityservice.modules.Domain.Actions.DomainList;

import com.mwambacodes.identityservice.modules.Domain.DomainEntity;
import com.mwambacodes.identityservice.modules.Domain.DomainRepository;
import com.mwambacodes.identityservice.modules.Domain._Modules.DomainStatus.DomainStatusEntity;
import com.mwambacodes.identityservice.modules.Domain._Modules.DomainStatus.DomainStatusRepository;
import com.mwambacodes.identityservice.utils.Helpers;
import com.mwambacodes.identityservice.utils.QueryBuilder;
import com.mwambacodes.identityservice.utils.QueryBuilderOLD;
import com.mwambacodes.identityservice.utils.ServiceResult;
import lombok.RequiredArgsConstructor;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Service;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;

@Service
@RequiredArgsConstructor
public class DomainListServiceOLD {
    private final DomainRepository domainRepository;
    private final DomainStatusRepository domainStatusRepository;
    private static final Logger logger = LoggerFactory.getLogger(DomainListServiceOLD.class);
    private final DomainListDTOMapper domainListDTOMapper;

    public ServiceResult init(Map<String, Object> params) {
        int page = params.get("page") != null ? Integer.parseInt(params.get("page").toString()) : 1;
        int size = params.get("size") != null ? (int) Integer.parseInt(params.get("size").toString()): 10;
        var direction = params.get("direction") != null ? params.get("direction").toString(): "asc";
        var sortColumn = params.get("sort") != null ? params.get("sort").toString(): "id";

        String name = params.get("name") != null ? params.get("name").toString(): "";
        String url = params.get("url") != null ? params.get("url").toString(): "";
        String administratorEmail = params.get("administratorEmail") != null ? params.get("administratorEmail").toString(): "";
        String status = params.get("status") != null ? params.get("status").toString(): "";

        Sort sort = Sort.by(sortColumn);

        if (Objects.equals(direction, "asc")) {
            sort.descending();
        } else {
            sort.ascending();
        }

        Pageable pageable = PageRequest.of(page-1, size, sort );

        var queryBuilder = new QueryBuilderOLD<DomainEntity>();

        if (!name.isBlank() && !name.isEmpty()) {
            queryBuilder.likeWhere("name", name);
        }
        if (!url.isBlank() && !url.isEmpty()) {
            queryBuilder.likeWhere("url", url);
        }
        if (!administratorEmail.isBlank() && !administratorEmail.isEmpty()) {
            queryBuilder.likeWhere("administratorEmail", administratorEmail);
        }
        if (!status.isBlank() && !status.isEmpty()) {
            try {
                DomainStatusEntity domainStatus = domainStatusRepository.getReferenceById(
                        Integer.parseInt(status)
                );
                queryBuilder.where("domainStatus", domainStatus);
            } catch (Exception ignore){}
        }
        if (params.get("created_by") != null) {
            queryBuilder.likeWhere("created_by", params.get("created_by").toString());
        }
        if (params.get("created_date") != null) {
            try {
                Date createdBy = new SimpleDateFormat("yyyy-MM-dd")
                        .parse(params.get("created_by").toString());
                queryBuilder.where("created_by", createdBy);
            } catch (Exception ignore){}
        }

        Page<DomainListDTO> page_data = domainRepository
                .findAll(queryBuilder.build(), pageable)
                .map(domainListDTOMapper);

        params.put("page", page);
        params.put("size", size);
        params.put("sort", sortColumn);
        params.put("direction", direction);

        Map<String, Object> data = new HashMap<>();
        data.put("content", page_data.getContent());
        data.put("currentPage", page_data.getNumber() + 1);
        data.put("totalRecords", page_data.getTotalElements());
        data.put("totalPages", page_data.getTotalPages());
        data.put("params", params);

        return Helpers.success(data);
    }

}
